<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dvirf.github.io</id><title>Play Framework Tutorial</title><subtitle>A tutorial for creating a Play Framework application from scratch with SBT.</subtitle> <updated>2020-04-07T18:10:20+03:00</updated> <author> <name>Dvir</name> <uri>https://dvirf.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dvirf.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator> <rights> © 2020 Dvir </rights> <icon>/play-tutorial/assets/img/favicons/favicon.ico</icon> <logo>/play-tutorial/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Scalafmt</title><link href="https://dvirf.github.io/posts/scalafmt/" rel="alternate" type="text/html" title="Scalafmt" /><published>2020-04-07T01:00:38+03:00</published> <updated>2020-04-07T18:10:20+03:00</updated> <id>https://dvirf.github.io/posts/scalafmt/</id> <content src="https://dvirf.github.io/posts/scalafmt/" /> <author> <name>Dvir</name> </author> <category term="Formatting" /> <summary>Scalafmt formats code so that it looks consistent between people on your team. For example, it can automatically rewrite this code, which has a weird indentation: 1 2 3 4 5 // Example 1: parameter...</summary> </entry> <entry><title>SLF4J</title><link href="https://dvirf.github.io/posts/slf4j/" rel="alternate" type="text/html" title="SLF4J" /><published>2020-04-07T01:00:36+03:00</published> <updated>2020-04-07T18:10:20+03:00</updated> <id>https://dvirf.github.io/posts/slf4j/</id> <content src="https://dvirf.github.io/posts/slf4j/" /> <author> <name>Dvir</name> </author> <category term="Logging" /> <summary>It’s time to add logging to our app. We will add logging using SLF4J, and bind the implementation to logback. SLF4J, Simple Logging Facade for Java, serves as a simple facade or abstraction for va...</summary> </entry> <entry><title>Macwire</title><link href="https://dvirf.github.io/posts/macwire/" rel="alternate" type="text/html" title="Macwire" /><published>2020-04-07T01:00:34+03:00</published> <updated>2020-04-07T18:10:20+03:00</updated> <id>https://dvirf.github.io/posts/macwire/</id> <content src="https://dvirf.github.io/posts/macwire/" /> <author> <name>Dvir</name> </author> <category term="Dependency Injection" /> <summary>How MacWire works MacWire uses scala macros to instantiate new objects, using values in the enclosing types for constructor parameters. Consider 2 services, X and Y, and three dependencies, A, B ...</summary> </entry> <entry><title>Circe</title><link href="https://dvirf.github.io/posts/circe/" rel="alternate" type="text/html" title="Circe" /><published>2020-04-07T01:00:32+03:00</published> <updated>2020-04-07T18:10:20+03:00</updated> <id>https://dvirf.github.io/posts/circe/</id> <content src="https://dvirf.github.io/posts/circe/" /> <author> <name>Dvir</name> </author> <category term="Json" /> <summary>play-json enabled us to class-up json (deserializing it from string to a case class) and to serialize json with relative ease. Circe (pronounced SUR-see) is yet another JSON library for Scala. It ...</summary> </entry> <entry><title>Play modes</title><link href="https://dvirf.github.io/posts/play-modes/" rel="alternate" type="text/html" title="Play modes" /><published>2020-04-07T01:00:30+03:00</published> <updated>2020-04-07T18:10:20+03:00</updated> <id>https://dvirf.github.io/posts/play-modes/</id> <content src="https://dvirf.github.io/posts/play-modes/" /> <author> <name>Dvir</name> </author> <category term="Modes" /> <summary>Play has 3 modes: Dev, Prod and Test. Whenever a play application is started, it is started using one of the 3 modes above. For example, when running Play with sbt run the mode will be Dev. When r...</summary> </entry> </feed>
